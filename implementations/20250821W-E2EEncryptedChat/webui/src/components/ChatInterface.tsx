// Chat Interface Component
// Generated by ae-framework Code Generation Agent

import React, { useEffect, useState } from 'react';
import {
  Box,
  Container,
  Paper,
  Typography,
  Drawer,
  AppBar,
  Toolbar,
  IconButton,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import {
  Menu as MenuIcon,
  Settings as SettingsIcon,
  DarkMode as DarkModeIcon,
  LightMode as LightModeIcon,
} from '@mui/icons-material';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '@/store';
import { toggleSidebar, toggleTheme, openSettings } from '@/store';
import { useAuth, useWebSocket } from '@/hooks';
import MessageComponent from './MessageComponent';
import MessageComposer from './MessageComposer';
import ReadStatusBadge from './ReadStatusBadge';
import SettingsPanel from './SettingsPanel';
import AuthForm from './AuthForm';

const ChatInterface: React.FC = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const dispatch = useDispatch();
  
  const { isAuthenticated, user } = useAuth();
  const { sidebarOpen, settingsOpen, theme: currentTheme } = useSelector((state: RootState) => state.ui);
  const { activeConversationId, messages } = useSelector((state: RootState) => state.chat);
  
  const { connected, connect } = useWebSocket();
  
  const [conversationList] = useState([
    { id: '1', name: 'General Chat', lastActivity: new Date() },
    { id: '2', name: 'Development Team', lastActivity: new Date() },
  ]);

  useEffect(() => {
    if (isAuthenticated && !connected) {
      connect();
    }
  }, [isAuthenticated, connected, connect]);

  const handleToggleSidebar = () => {
    dispatch(toggleSidebar());
  };

  const handleToggleTheme = () => {
    dispatch(toggleTheme());
  };

  const handleOpenSettings = () => {
    dispatch(openSettings());
  };

  const currentMessages = activeConversationId ? messages[activeConversationId] || [] : [];

  if (!isAuthenticated) {
    return (
      <Container maxWidth="sm">
        <AuthForm />
      </Container>
    );
  }

  return (
    <Box sx={{ display: 'flex', height: '100vh' }}>
      {/* App Bar */}
      <AppBar position="fixed" sx={{ zIndex: theme.zIndex.drawer + 1 }}>
        <Toolbar>
          <IconButton
            color="inherit"
            edge="start"
            onClick={handleToggleSidebar}
            sx={{ mr: 2 }}
          >
            <MenuIcon />
          </IconButton>
          
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
            E2E Chat - {activeConversationId ? 'Secure Messaging' : 'Select Conversation'}
          </Typography>
          
          <IconButton color="inherit" onClick={handleToggleTheme}>
            {currentTheme === 'light' ? <DarkModeIcon /> : <LightModeIcon />}
          </IconButton>
          
          <IconButton color="inherit" onClick={handleOpenSettings}>
            <SettingsIcon />
          </IconButton>
        </Toolbar>
      </AppBar>

      {/* Sidebar */}
      <Drawer
        variant={isMobile ? 'temporary' : 'persistent'}
        open={sidebarOpen}
        onClose={handleToggleSidebar}
        sx={{
          width: 280,
          flexShrink: 0,
          '& .MuiDrawer-paper': {
            width: 280,
            boxSizing: 'border-box',
            mt: 8,
          },
        }}
      >
        <Box sx={{ p: 2 }}>
          <Typography variant="h6" gutterBottom>
            Conversations
          </Typography>
          
          {conversationList.map((conversation) => (
            <Paper
              key={conversation.id}
              elevation={1}
              sx={{
                p: 2,
                mb: 1,
                cursor: 'pointer',
                bgcolor: activeConversationId === conversation.id ? 'action.selected' : 'background.paper',
                '&:hover': {
                  bgcolor: 'action.hover',
                },
              }}
              onClick={() => {
                dispatch({ type: 'chat/setActiveConversation', payload: conversation.id });
              }}
            >
              <Typography variant="subtitle1">{conversation.name}</Typography>
              <Typography variant="caption" color="text.secondary">
                Last activity: {conversation.lastActivity.toLocaleTimeString()}
              </Typography>
            </Paper>
          ))}
        </Box>
      </Drawer>

      {/* Main Content */}
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          display: 'flex',
          flexDirection: 'column',
          ml: sidebarOpen && !isMobile ? 0 : 0,
          mt: 8,
          height: 'calc(100vh - 64px)',
        }}
      >
        {activeConversationId ? (
          <>
            {/* Messages Area */}
            <Box
              sx={{
                flexGrow: 1,
                overflow: 'auto',
                p: 2,
                display: 'flex',
                flexDirection: 'column',
                gap: 1,
              }}
            >
              {currentMessages.length === 0 ? (
                <Box
                  sx={{
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    height: '100%',
                  }}
                >
                  <Typography variant="body1" color="text.secondary">
                    No messages yet. Start the conversation!
                  </Typography>
                </Box>
              ) : (
                currentMessages.map((message) => (
                  <MessageComponent
                    key={message.id}
                    message={message}
                    isOwnMessage={message.senderId === user?.id}
                    onMarkAsRead={() => {
                      // Handle mark as read
                    }}
                  />
                ))
              )}
            </Box>

            {/* Message Composer */}
            <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>
              <MessageComposer
                onSendMessage={(content) => {
                  // Handle send message
                  console.log('Sending message:', content);
                }}
                placeholder="Type your secure message..."
                disabled={!connected}
              />
              
              {!connected && (
                <Typography variant="caption" color="error" sx={{ mt: 1, display: 'block' }}>
                  Disconnected - Messages will be sent when connection is restored
                </Typography>
              )}
            </Box>
          </>
        ) : (
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
            }}
          >
            <Typography variant="h6" color="text.secondary">
              Select a conversation to start chatting
            </Typography>
          </Box>
        )}
      </Box>

      {/* Settings Panel */}
      <SettingsPanel />
    </Box>
  );
};

export default ChatInterface;