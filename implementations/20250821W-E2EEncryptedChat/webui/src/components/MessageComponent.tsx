// Message Component
// Generated by ae-framework Code Generation Agent

import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Avatar,
  IconButton,
  Tooltip,
  Chip,
} from '@mui/material';
import {
  Lock as LockIcon,
  CheckCircle as CheckCircleIcon,
  Schedule as ScheduleIcon,
} from '@mui/icons-material';
import { Message } from '@/types';
import ReadStatusBadge from './ReadStatusBadge';

interface MessageComponentProps {
  message: Message;
  isOwnMessage: boolean;
  onMarkAsRead: () => void;
}

const MessageComponent: React.FC<MessageComponentProps> = ({
  message,
  isOwnMessage,
  onMarkAsRead,
}) => {
  const [showTimestamp, setShowTimestamp] = useState(false);

  const formatTimestamp = (date: Date) => {
    return new Intl.DateTimeFormat('ja-JP', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    }).format(new Date(date));
  };

  return (
    <Box
      sx={{
        display: 'flex',
        justifyContent: isOwnMessage ? 'flex-end' : 'flex-start',
        mb: 1,
        alignItems: 'flex-end',
      }}
    >
      {!isOwnMessage && (
        <Avatar sx={{ mr: 1, width: 32, height: 32 }}>
          {message.senderId.charAt(0).toUpperCase()}
        </Avatar>
      )}
      
      <Box sx={{ maxWidth: '70%' }}>
        <Paper
          elevation={1}
          sx={{
            p: 1.5,
            backgroundColor: isOwnMessage ? 'primary.light' : 'background.paper',
            color: isOwnMessage ? 'primary.contrastText' : 'text.primary',
            borderRadius: 2,
            cursor: 'pointer',
          }}
          onClick={() => setShowTimestamp(!showTimestamp)}
        >
          {/* Message Content */}
          <Typography variant="body1">
            {message.content}
          </Typography>
          
          {/* Encryption Status */}
          {message.isEncrypted && (
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
              <Tooltip title="End-to-end encrypted">
                <LockIcon sx={{ fontSize: 14, color: 'success.main', mr: 0.5 }} />
              </Tooltip>
              <Typography variant="caption" color="text.secondary">
                Encrypted
              </Typography>
            </Box>
          )}
          
          {/* Timestamp and Status */}
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              mt: 1,
            }}
          >
            {showTimestamp && (
              <Typography variant="caption" color="text.secondary">
                {formatTimestamp(message.timestamp)}
              </Typography>
            )}
            
            {isOwnMessage && (
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                <ReadStatusBadge
                  messageId={message.id}
                  showDetails={false}
                />
                
                {/* Delivery Status */}
                <Tooltip title="Delivered">
                  <CheckCircleIcon sx={{ fontSize: 14, color: 'success.main' }} />
                </Tooltip>
              </Box>
            )}
          </Box>
        </Paper>
        
        {/* Message Type Indicator */}
        {message.type !== 'text' && (
          <Chip
            label={message.type.toUpperCase()}
            size="small"
            variant="outlined"
            sx={{ mt: 0.5, fontSize: '0.7rem' }}
          />
        )}
      </Box>
      
      {isOwnMessage && (
        <Avatar sx={{ ml: 1, width: 32, height: 32 }}>
          {message.senderId.charAt(0).toUpperCase()}
        </Avatar>
      )}
    </Box>
  );
};

export default MessageComponent;