# language: ja
フィーチャ: E2E暗号化メッセージング
  E2Eチャットアプリケーションのユーザーとして
  暗号化されたメッセージを安全に送受信したい
  なぜなら プライベートな通信を保護したいから

  背景:
    前提 システムが起動している
    かつ データベースが初期化されている

  シナリオ: 新規ユーザーの登録とキーペア生成
    前提 ユーザー "alice@example.com" が存在しない
    もし ユーザーが以下の情報で登録する:
      | email           | password    | displayName |
      | alice@example.com | password123 | Alice      |
    ならば 登録が成功する
    かつ ユーザーのRSAキーペアが生成される
    かつ 公開鍵が他のユーザーと共有可能になる

  シナリオ: ユーザー認証とログイン
    前提 ユーザー "alice@example.com" が登録済み
    もし ユーザーが以下の認証情報でログインする:
      | email           | password    |
      | alice@example.com | password123 |
    ならば ログインが成功する
    かつ JWTトークンが発行される
    かつ ユーザーセッションが開始される

  シナリオ: 公開鍵の交換
    前提 ユーザー "alice@example.com" がログイン済み
    かつ ユーザー "bob@example.com" が登録済み
    もし Alice が Bob の公開鍵を取得する
    ならば Bob の公開鍵が正常に取得される
    かつ Alice のキーストアに Bob の公開鍵が保存される

  シナリオ: 暗号化メッセージの送信
    前提 ユーザー "alice@example.com" がログイン済み
    かつ ユーザー "bob@example.com" がログイン済み
    かつ Alice が Bob の公開鍵を持っている
    もし Alice が Bob に以下のメッセージを送信する:
      | content                    |
      | こんにちは、Bobさん！         |
    ならば メッセージが暗号化される
    かつ 暗号化されたメッセージがサーバーに送信される
    かつ Bob にリアルタイム通知が送信される

  シナリオ: 暗号化メッセージの受信と復号
    前提 Alice から Bob に暗号化メッセージが送信済み
    かつ Bob がログイン済み
    もし Bob がメッセージを受信する
    ならば メッセージが自動的に復号される
    かつ 復号されたメッセージ内容が表示される
    かつ メッセージ内容が "こんにちは、Bobさん！" である

  シナリオ: WebSocket リアルタイム通信
    前提 ユーザー "alice@example.com" がログイン済み
    かつ ユーザー "bob@example.com" がログイン済み
    かつ Alice と Bob がWebSocket接続している
    もし Alice がメッセージを送信する
    ならば Bob にリアルタイムでメッセージが配信される
    かつ 配信遅延が 500ms 以内である

  シナリオ: グループ会話の作成
    前提 ユーザー "alice@example.com" がログイン済み
    かつ ユーザー "bob@example.com" が登録済み
    かつ ユーザー "charlie@example.com" が登録済み
    もし Alice が Bob と Charlie を招待してグループ会話を作成する
    ならば グループ会話が正常に作成される
    かつ 全参加者の公開鍵が交換される
    かつ グループメンバーが通知を受信する

  シナリオ: グループメッセージの暗号化
    前提 Alice, Bob, Charlie のグループ会話が存在する
    かつ 全員がログイン済み
    もし Alice がグループに以下のメッセージを送信する:
      | content                           |
      | 皆さん、こんにちは！お疲れ様です。    |
    ならば メッセージが各メンバー用に個別暗号化される
    かつ Bob と Charlie が同じ内容のメッセージを受信する
    かつ 各自の秘密鍵でのみ復号可能である

  シナリオ: デバイス別既読ステータス管理
    前提 Alice から Bob にメッセージが送信済み
    かつ Bob が複数デバイス (スマートフォン, PC) でログイン中
    もし Bob がスマートフォンでメッセージを既読にする
    ならば スマートフォンの既読ステータスが記録される
    かつ PC の既読ステータスは未読のままである
    かつ Alice に既読通知が送信される

  シナリオ: エラーハンドリング - 復号失敗
    前提 不正な暗号化データがサーバーに存在する
    もし ユーザーが不正なメッセージを受信しようとする
    ならば 復号エラーが適切にハンドリングされる
    かつ エラーメッセージが表示される
    かつ アプリケーションがクラッシュしない

  シナリオ: セキュリティ - 不正アクセス防止
    前提 ユーザー "alice@example.com" がログイン済み
    かつ ユーザー "eve@example.com" (攻撃者) が存在する
    もし Eve が Alice と Bob の会話にアクセスしようとする
    ならば アクセスが拒否される
    かつ セキュリティログが記録される
    かつ Alice に不正アクセス試行が通知される

  シナリオ: パフォーマンス - 大量メッセージ処理
    前提 ユーザー "alice@example.com" がログイン済み
    かつ ユーザー "bob@example.com" がログイン済み
    もし Alice が Bob に 100件のメッセージを連続送信する
    ならば 全メッセージが正常に暗号化される
    かつ 全メッセージが 10秒以内に送信完了する
    かつ Bob が全メッセージを正常に受信する

  シナリオ: ネットワーク断絶時の動作
    前提 Alice がメッセージ送信中である
    もし ネットワーク接続が一時的に切断される
    ならば メッセージが送信キューに保持される
    かつ 接続復旧時に自動的に送信される
    かつ ユーザーに適切な状態表示がされる