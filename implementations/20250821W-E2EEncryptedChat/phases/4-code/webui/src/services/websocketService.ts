// WebSocket Service
// Generated by ae-framework Code Generation Agent

import { store } from '@/store';
import { addMessage, updateReadStatus } from '@/store';
import { WebSocketEvent } from '@/types';

class WebSocketService {
  private ws: WebSocket | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private pingInterval: NodeJS.Timeout | null = null;

  connect(url: string = import.meta.env.VITE_WS_URL || 'ws://localhost:3000'): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        this.ws = new WebSocket(url);

        this.ws.onopen = () => {
          console.log('WebSocket connected');
          this.reconnectAttempts = 0;
          this.startHeartbeat();
          resolve();
        };

        this.ws.onmessage = (event) => {
          this.handleMessage(event);
        };

        this.ws.onclose = () => {
          console.log('WebSocket disconnected');
          this.stopHeartbeat();
          this.attemptReconnect();
        };

        this.ws.onerror = (error) => {
          console.error('WebSocket error:', error);
          reject(error);
        };
      } catch (error) {
        reject(error);
      }
    });
  }

  disconnect(): void {
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
    this.stopHeartbeat();
  }

  send(event: WebSocketEvent): void {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(event));
    } else {
      console.warn('WebSocket not connected. Cannot send message:', event);
    }
  }

  markAsRead(messageId: string, deviceId: string = 'web-client'): void {
    this.send({
      type: 'message',
      payload: {
        type: 'mark-read',
        messageId,
        deviceId,
      },
      timestamp: new Date(),
    });
  }

  getReadStatus(messageId: string): void {
    this.send({
      type: 'message',
      payload: {
        type: 'get-read-status',
        messageId,
      },
      timestamp: new Date(),
    });
  }

  private handleMessage(event: MessageEvent): void {
    try {
      const data = JSON.parse(event.data);
      
      switch (data.type) {
        case 'connected':
          console.log('WebSocket handshake completed');
          break;
          
        case 'message':
          if (data.payload?.type === 'new-message') {
            store.dispatch(addMessage(data.payload.message));
          }
          break;
          
        case 'read-notification':
          if (data.payload?.readStatus) {
            store.dispatch(updateReadStatus(data.payload.readStatus));
          }
          break;
          
        case 'pong':
          // Heartbeat response received
          break;
          
        default:
          console.log('Unknown WebSocket message type:', data.type);
      }
    } catch (error) {
      console.error('Error parsing WebSocket message:', error);
    }
  }

  private startHeartbeat(): void {
    this.pingInterval = setInterval(() => {
      this.send({
        type: 'message',
        payload: { type: 'ping' },
        timestamp: new Date(),
      });
    }, 30000); // 30 seconds
  }

  private stopHeartbeat(): void {
    if (this.pingInterval) {
      clearInterval(this.pingInterval);
      this.pingInterval = null;
    }
  }

  private attemptReconnect(): void {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
      
      console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);
      
      setTimeout(() => {
        this.connect();
      }, delay);
    } else {
      console.error('Max reconnection attempts reached');
    }
  }
}

export const websocketService = new WebSocketService();