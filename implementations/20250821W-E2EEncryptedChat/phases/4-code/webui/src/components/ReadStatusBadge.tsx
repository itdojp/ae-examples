// Read Status Badge Component
// Generated by ae-framework Code Generation Agent

import React, { useState } from 'react';
import {
  Box,
  Badge,
  Tooltip,
  Popover,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Avatar,
  Typography,
  Chip,
} from '@mui/material';
import {
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
  Group as GroupIcon,
} from '@mui/icons-material';
import { useSelector } from 'react-redux';
import { RootState } from '@/store';
import { useReadStatus } from '@/hooks';

interface ReadStatusBadgeProps {
  messageId: string;
  showDetails?: boolean;
}

const ReadStatusBadge: React.FC<ReadStatusBadgeProps> = ({
  messageId,
  showDetails = true,
}) => {
  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);
  const { settings } = useSelector((state: RootState) => state.settings);
  const { readStatuses } = useReadStatus(messageId);
  
  const readCount = readStatuses.filter(status => status.isRead).length;
  const totalReaders = readStatuses.length;
  
  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    if (showDetails && readStatuses.length > 0) {
      setAnchorEl(event.currentTarget);
    }
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const formatReadTime = (date: Date) => {
    return new Intl.DateTimeFormat('ja-JP', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    }).format(new Date(date));
  };

  // Don't show if privacy settings disable read status
  if (!settings.privacy.showReadStatus) {
    return null;
  }

  const open = Boolean(anchorEl);

  return (
    <>
      <Tooltip
        title={
          readCount === 0
            ? 'Unread'
            : readCount === totalReaders
            ? `Read by all (${readCount})`
            : `Read by ${readCount} of ${totalReaders}`
        }
      >
        <Box
          onClick={handleClick}
          sx={{
            cursor: showDetails && readStatuses.length > 0 ? 'pointer' : 'default',
            display: 'inline-flex',
            alignItems: 'center',
          }}
        >
          <Badge
            badgeContent={readCount > 0 ? readCount : undefined}
            color="success"
            variant="dot"
            invisible={readCount === 0}
          >
            {readCount === 0 ? (
              <VisibilityOffIcon
                sx={{
                  fontSize: 16,
                  color: 'text.secondary',
                }}
              />
            ) : readCount === totalReaders ? (
              <VisibilityIcon
                sx={{
                  fontSize: 16,
                  color: 'success.main',
                }}
              />
            ) : (
              <GroupIcon
                sx={{
                  fontSize: 16,
                  color: 'warning.main',
                }}
              />
            )}
          </Badge>
        </Box>
      </Tooltip>

      {/* Read Status Detail Popover */}
      <Popover
        open={open}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
        transformOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
      >
        <Box sx={{ p: 2, minWidth: 250, maxWidth: 400 }}>
          <Typography variant="subtitle2" gutterBottom>
            Read Status ({readCount}/{totalReaders})
          </Typography>
          
          {readStatuses.length === 0 ? (
            <Typography variant="body2" color="text.secondary">
              No read status available
            </Typography>
          ) : (
            <List dense sx={{ py: 0 }}>
              {readStatuses.map((status) => (
                <ListItem key={`${status.userId}-${status.deviceId}`} sx={{ px: 0 }}>
                  <ListItemAvatar>
                    <Avatar sx={{ width: 32, height: 32 }}>
                      {status.userId.charAt(0).toUpperCase()}
                    </Avatar>
                  </ListItemAvatar>
                  
                  <ListItemText
                    primary={
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography variant="body2">
                          {status.userId}
                        </Typography>
                        {status.isRead ? (
                          <Chip
                            label="Read"
                            size="small"
                            color="success"
                            variant="outlined"
                          />
                        ) : (
                          <Chip
                            label="Delivered"
                            size="small"
                            color="default"
                            variant="outlined"
                          />
                        )}
                      </Box>
                    }
                    secondary={
                      status.isRead ? (
                        <Typography variant="caption" color="text.secondary">
                          Read {formatReadTime(status.readAt)}
                        </Typography>
                      ) : (
                        <Typography variant="caption" color="text.secondary">
                          Delivered but not read
                        </Typography>
                      )
                    }
                  />
                </ListItem>
              ))}
            </List>
          )}
          
          {settings.privacy.showReadStatus && (
            <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
              Read receipts are enabled in your privacy settings
            </Typography>
          )}
        </Box>
      </Popover>
    </>
  );
};

export default ReadStatusBadge;