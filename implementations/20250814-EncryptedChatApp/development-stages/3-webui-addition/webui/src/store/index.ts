// Redux Store Configuration
// Generated by ae-framework Code Generation Agent

import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AuthState, ChatState, UIState, UserSettings, User, Message, ReadStatus } from '@/types';

// Auth Slice
const initialAuthState: AuthState = {
  isAuthenticated: false,
  user: null,
  token: null,
  refreshToken: null,
  loading: false,
  error: null,
};

const authSlice = createSlice({
  name: 'auth',
  initialState: initialAuthState,
  reducers: {
    loginStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    loginSuccess: (state, action: PayloadAction<{ user: User; token: string; refreshToken?: string }>) => {
      state.isAuthenticated = true;
      state.user = action.payload.user;
      state.token = action.payload.token;
      state.refreshToken = action.payload.refreshToken || null;
      state.loading = false;
      state.error = null;
    },
    loginFailure: (state, action: PayloadAction<string>) => {
      state.isAuthenticated = false;
      state.user = null;
      state.token = null;
      state.refreshToken = null;
      state.loading = false;
      state.error = action.payload;
    },
    logout: (state) => {
      state.isAuthenticated = false;
      state.user = null;
      state.token = null;
      state.refreshToken = null;
      state.loading = false;
      state.error = null;
    },
  },
});

// Chat Slice
const initialChatState: ChatState = {
  currentUser: null,
  conversations: [],
  activeConversationId: null,
  messages: {},
  readStatuses: {},
  loading: false,
  error: null,
};

const chatSlice = createSlice({
  name: 'chat',
  initialState: initialChatState,
  reducers: {
    setActiveConversation: (state, action: PayloadAction<string>) => {
      state.activeConversationId = action.payload;
    },
    addMessage: (state, action: PayloadAction<Message>) => {
      const { conversationId } = action.payload;
      if (!state.messages[conversationId]) {
        state.messages[conversationId] = [];
      }
      state.messages[conversationId].push(action.payload);
    },
    updateReadStatus: (state, action: PayloadAction<ReadStatus>) => {
      const { messageId } = action.payload;
      if (!state.readStatuses[messageId]) {
        state.readStatuses[messageId] = [];
      }
      const existingIndex = state.readStatuses[messageId].findIndex(
        (rs) => rs.userId === action.payload.userId && rs.deviceId === action.payload.deviceId
      );
      if (existingIndex >= 0) {
        state.readStatuses[messageId][existingIndex] = action.payload;
      } else {
        state.readStatuses[messageId].push(action.payload);
      }
    },
  },
});

// UI Slice
const initialUIState: UIState = {
  theme: 'light',
  sidebarOpen: true,
  settingsOpen: false,
  notifications: [],
  composeText: '',
  isTyping: false,
};

const uiSlice = createSlice({
  name: 'ui',
  initialState: initialUIState,
  reducers: {
    toggleTheme: (state) => {
      state.theme = state.theme === 'light' ? 'dark' : 'light';
    },
    toggleSidebar: (state) => {
      state.sidebarOpen = !state.sidebarOpen;
    },
    openSettings: (state) => {
      state.settingsOpen = true;
    },
    closeSettings: (state) => {
      state.settingsOpen = false;
    },
    updateComposeText: (state, action: PayloadAction<string>) => {
      state.composeText = action.payload;
    },
    setTyping: (state, action: PayloadAction<boolean>) => {
      state.isTyping = action.payload;
    },
  },
});

// Settings Slice
const initialSettingsState: UserSettings = {
  privacy: {
    showReadStatus: true,
    showLastSeen: true,
    allowMessagePreview: true,
  },
  notifications: {
    sound: true,
    desktop: true,
    email: false,
  },
  appearance: {
    theme: 'auto',
    fontSize: 'medium',
    compactMode: false,
  },
};

const settingsSlice = createSlice({
  name: 'settings',
  initialState: initialSettingsState,
  reducers: {
    updateSettings: (state, action: PayloadAction<Partial<UserSettings>>) => {
      return { ...state, ...action.payload };
    },
  },
});

// Configure Store
export const store = configureStore({
  reducer: {
    auth: authSlice.reducer,
    chat: chatSlice.reducer,
    ui: uiSlice.reducer,
    settings: settingsSlice.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: ['auth/loginSuccess'],
        ignoredPaths: ['auth.user.publicKey'],
      },
    }),
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

export const { loginStart, loginSuccess, loginFailure, logout } = authSlice.actions;
export const { setActiveConversation, addMessage, updateReadStatus } = chatSlice.actions;
export const { toggleTheme, toggleSidebar, openSettings, closeSettings, updateComposeText, setTyping } = uiSlice.actions;
export const { updateSettings } = settingsSlice.actions;