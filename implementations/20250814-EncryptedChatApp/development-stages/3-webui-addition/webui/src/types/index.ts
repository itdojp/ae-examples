// WebUI Type Definitions
// Generated by ae-framework Code Generation Agent

export interface User {
  id: string;
  username: string;
  email: string;
  avatar?: string;
  publicKey?: CryptoKey;
  createdAt?: string;
  lastSeen?: string;
}

export interface Message {
  id: string;
  conversationId: string;
  senderId: string;
  content: string;
  encryptedContent?: ArrayBuffer;
  timestamp: Date;
  type: 'text' | 'file' | 'image';
  isEncrypted: boolean;
  signature?: ArrayBuffer;
}

export interface ReadStatus {
  messageId: string;
  userId: string;
  deviceId: string;
  readAt: Date;
  isRead: boolean;
}

export interface Conversation {
  id: string;
  name: string;
  participants: User[];
  lastMessage?: Message;
  createdAt: Date;
  isGroup: boolean;
}

export interface ChatState {
  currentUser: User | null;
  conversations: Conversation[];
  activeConversationId: string | null;
  messages: Record<string, Message[]>;
  readStatuses: Record<string, ReadStatus[]>;
  loading: boolean;
  error: string | null;
}

export interface AuthState {
  isAuthenticated: boolean;
  user: User | null;
  token: string | null;
  refreshToken: string | null;
  loading: boolean;
  error: string | null;
}

export interface UIState {
  theme: 'light' | 'dark';
  sidebarOpen: boolean;
  settingsOpen: boolean;
  notifications: Notification[];
  composeText: string;
  isTyping: boolean;
}

export interface UserSettings {
  privacy: {
    showReadStatus: boolean;
    showLastSeen: boolean;
    allowMessagePreview: boolean;
  };
  notifications: {
    sound: boolean;
    desktop: boolean;
    email: boolean;
  };
  appearance: {
    theme: 'light' | 'dark' | 'auto';
    fontSize: 'small' | 'medium' | 'large';
    compactMode: boolean;
  };
}

export interface WebSocketEvent {
  type: 'connected' | 'disconnected' | 'message' | 'read-status' | 'typing' | 'error';
  payload?: any;
  timestamp: Date;
}

export interface APIResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  timestamp?: string;
}

export interface EncryptionKeys {
  publicKey: CryptoKey;
  privateKey: CryptoKey;
  sharedKeys: Record<string, CryptoKey>;
}

export interface AppNotification {
  id: string;
  type: 'info' | 'success' | 'warning' | 'error';
  title: string;
  message: string;
  timestamp: Date;
  read: boolean;
  actions?: NotificationAction[];
}

export interface NotificationAction {
  label: string;
  action: () => void;
  variant?: 'contained' | 'outlined' | 'text';
}