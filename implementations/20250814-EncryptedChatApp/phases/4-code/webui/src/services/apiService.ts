// API Service
// Generated by ae-framework Code Generation Agent

import axios, { AxiosInstance, AxiosResponse } from 'axios';
import { APIResponse, User, Message, ReadStatus, UserSettings } from '@/types';

class APIService {
  private api: AxiosInstance;

  constructor(baseURL: string = import.meta.env.VITE_API_URL + '/api' || 'http://localhost:3000/api') {
    this.api = axios.create({
      baseURL,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
      },
    });

    this.setupInterceptors();
  }

  private setupInterceptors(): void {
    // Request interceptor for auth token
    this.api.interceptors.request.use(
      (config) => {
        const token = localStorage.getItem('authToken');
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
      },
      (error) => Promise.reject(error)
    );

    // Response interceptor for error handling
    this.api.interceptors.response.use(
      (response) => response,
      async (error) => {
        if (error.response?.status === 401) {
          // Handle token refresh or logout
          localStorage.removeItem('authToken');
          window.location.href = '/login';
        }
        return Promise.reject(error);
      }
    );
  }

  // Auth endpoints
  async login(email: string, password: string): Promise<APIResponse<{ user: User; token: string; refreshToken?: string }>> {
    try {
      console.log('API login request:', { email, baseURL: this.api.defaults.baseURL });
      const response = await this.api.post('/auth/login', { email, password });
      console.log('API login response:', response.data);
      return {
        success: true,
        data: response.data
      };
    } catch (error: any) {
      console.error('API login error:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.error || error.message || 'Login failed'
      };
    }
  }

  async register(userData: { username: string; email: string; password: string }): Promise<APIResponse<{ user: User; token: string }>> {
    try {
      const response = await this.api.post('/auth/register', userData);
      return {
        success: true,
        data: response.data
      };
    } catch (error: any) {
      return {
        success: false,
        error: error.response?.data?.error || error.message || 'Registration failed'
      };
    }
  }

  async logout(): Promise<APIResponse> {
    const response = await this.api.post('/auth/logout');
    return response.data;
  }

  async refreshToken(): Promise<APIResponse<{ token: string; refreshToken: string }>> {
    const response = await this.api.post('/auth/refresh');
    return response.data;
  }

  // Message endpoints
  async getMessages(conversationId: string, page: number = 1, limit: number = 50): Promise<APIResponse<Message[]>> {
    const response = await this.api.get(`/messages/${conversationId}`, {
      params: { page, limit },
    });
    return response.data;
  }

  async sendMessage(conversationId: string, content: string, encryptedContent?: ArrayBuffer): Promise<APIResponse<Message>> {
    const response = await this.api.post('/messages', {
      conversationId,
      content,
      encryptedContent: encryptedContent ? Array.from(new Uint8Array(encryptedContent)) : undefined,
    });
    return response.data;
  }

  async deleteMessage(messageId: string): Promise<APIResponse> {
    const response = await this.api.delete(`/messages/${messageId}`);
    return response.data;
  }

  // Read status endpoints
  async markMessageAsRead(messageId: string, deviceId: string = 'web-client'): Promise<APIResponse> {
    const response = await this.api.post(`/messages/${messageId}/read`, { deviceId });
    return response.data;
  }

  async getReadStatus(messageId: string): Promise<APIResponse<ReadStatus[]>> {
    const response = await this.api.get(`/messages/${messageId}/read-status`);
    return response.data;
  }

  // Settings endpoints
  async getUserSettings(): Promise<APIResponse<UserSettings>> {
    const response = await this.api.get('/read-status/settings');
    return response.data;
  }

  async updateUserSettings(settings: Partial<UserSettings>): Promise<APIResponse<UserSettings>> {
    const response = await this.api.put('/read-status/settings', settings);
    return response.data;
  }

  // User endpoints
  async getCurrentUser(): Promise<APIResponse<User>> {
    const response = await this.api.get('/auth/me');
    return response.data;
  }

  async updateProfile(userData: Partial<User>): Promise<APIResponse<User>> {
    const response = await this.api.put('/auth/profile', userData);
    return response.data;
  }

  // Health check
  async healthCheck(): Promise<APIResponse> {
    const response = await this.api.get('/health');
    return response.data;
  }
}

export const apiService = new APIService();