// Settings Panel Component
// Generated by ae-framework Code Generation Agent

import React, { useState } from 'react';
import {
  Drawer,
  Box,
  Typography,
  Switch,
  FormControlLabel,
  FormGroup,
  Divider,
  Button,
  Alert,
  Tabs,
  Tab,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Slider,
} from '@mui/material';
import {
  Close as CloseIcon,
  Security as SecurityIcon,
  Notifications as NotificationsIcon,
  Palette as PaletteIcon,
} from '@mui/icons-material';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '@/store';
import { closeSettings } from '@/store';
import { useSettings } from '@/hooks';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {
  return (
    <div hidden={value !== index} style={{ padding: '20px 0' }}>
      {value === index && children}
    </div>
  );
};

const SettingsPanel: React.FC = () => {
  const dispatch = useDispatch();
  const { settingsOpen } = useSelector((state: RootState) => state.ui);
  const { settings, updateSettings, loading } = useSettings();
  const [activeTab, setActiveTab] = useState(0);
  const [saveMessage, setSaveMessage] = useState<string | null>(null);

  const handleClose = () => {
    dispatch(closeSettings());
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleSettingChange = async (newSettings: Partial<typeof settings>) => {
    const result = await updateSettings(newSettings);
    if (result.success) {
      setSaveMessage('Settings saved successfully');
      setTimeout(() => setSaveMessage(null), 3000);
    } else {
      setSaveMessage(`Error: ${result.error}`);
      setTimeout(() => setSaveMessage(null), 5000);
    }
  };

  return (
    <Drawer
      anchor="right"
      open={settingsOpen}
      onClose={handleClose}
      sx={{
        '& .MuiDrawer-paper': {
          width: { xs: '100%', sm: 400 },
          boxSizing: 'border-box',
        },
      }}
    >
      <Box sx={{ p: 2 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
          <Typography variant="h6">Settings</Typography>
          <Button
            onClick={handleClose}
            variant="outlined"
            size="small"
            startIcon={<CloseIcon />}
          >
            Close
          </Button>
        </Box>

        {/* Save Message */}
        {saveMessage && (
          <Alert 
            severity={saveMessage.includes('Error') ? 'error' : 'success'} 
            sx={{ mb: 2 }}
          >
            {saveMessage}
          </Alert>
        )}

        {/* Tabs */}
        <Tabs value={activeTab} onChange={handleTabChange} variant="fullWidth">
          <Tab icon={<SecurityIcon />} label="Privacy" />
          <Tab icon={<NotificationsIcon />} label="Notifications" />
          <Tab icon={<PaletteIcon />} label="Appearance" />
        </Tabs>

        {/* Privacy Settings */}
        <TabPanel value={activeTab} index={0}>
          <Typography variant="subtitle1" gutterBottom>
            Privacy & Security
          </Typography>
          
          <FormGroup>
            <FormControlLabel
              control={
                <Switch
                  checked={settings.privacy.showReadStatus}
                  onChange={(e) =>
                    handleSettingChange({
                      privacy: {
                        ...settings.privacy,
                        showReadStatus: e.target.checked,
                      },
                    })
                  }
                  disabled={loading}
                />
              }
              label="Show read status to others"
            />
            
            <FormControlLabel
              control={
                <Switch
                  checked={settings.privacy.showLastSeen}
                  onChange={(e) =>
                    handleSettingChange({
                      privacy: {
                        ...settings.privacy,
                        showLastSeen: e.target.checked,
                      },
                    })
                  }
                  disabled={loading}
                />
              }
              label="Show last seen status"
            />
            
            <FormControlLabel
              control={
                <Switch
                  checked={settings.privacy.allowMessagePreview}
                  onChange={(e) =>
                    handleSettingChange({
                      privacy: {
                        ...settings.privacy,
                        allowMessagePreview: e.target.checked,
                      },
                    })
                  }
                  disabled={loading}
                />
              }
              label="Allow message previews in notifications"
            />
          </FormGroup>

          <Alert severity="info" sx={{ mt: 2 }}>
            All messages are end-to-end encrypted regardless of these settings
          </Alert>
        </TabPanel>

        {/* Notification Settings */}
        <TabPanel value={activeTab} index={1}>
          <Typography variant="subtitle1" gutterBottom>
            Notifications
          </Typography>
          
          <FormGroup>
            <FormControlLabel
              control={
                <Switch
                  checked={settings.notifications.sound}
                  onChange={(e) =>
                    handleSettingChange({
                      notifications: {
                        ...settings.notifications,
                        sound: e.target.checked,
                      },
                    })
                  }
                  disabled={loading}
                />
              }
              label="Sound notifications"
            />
            
            <FormControlLabel
              control={
                <Switch
                  checked={settings.notifications.desktop}
                  onChange={(e) =>
                    handleSettingChange({
                      notifications: {
                        ...settings.notifications,
                        desktop: e.target.checked,
                      },
                    })
                  }
                  disabled={loading}
                />
              }
              label="Desktop notifications"
            />
            
            <FormControlLabel
              control={
                <Switch
                  checked={settings.notifications.email}
                  onChange={(e) =>
                    handleSettingChange({
                      notifications: {
                        ...settings.notifications,
                        email: e.target.checked,
                      },
                    })
                  }
                  disabled={loading}
                />
              }
              label="Email notifications"
            />
          </FormGroup>
        </TabPanel>

        {/* Appearance Settings */}
        <TabPanel value={activeTab} index={2}>
          <Typography variant="subtitle1" gutterBottom>
            Appearance
          </Typography>
          
          <FormControl fullWidth sx={{ mb: 2 }}>
            <InputLabel>Theme</InputLabel>
            <Select
              value={settings.appearance.theme}
              label="Theme"
              onChange={(e) =>
                handleSettingChange({
                  appearance: {
                    ...settings.appearance,
                    theme: e.target.value as 'light' | 'dark' | 'auto',
                  },
                })
              }
              disabled={loading}
            >
              <MenuItem value="light">Light</MenuItem>
              <MenuItem value="dark">Dark</MenuItem>
              <MenuItem value="auto">Auto (System)</MenuItem>
            </Select>
          </FormControl>

          <FormControl fullWidth sx={{ mb: 2 }}>
            <InputLabel>Font Size</InputLabel>
            <Select
              value={settings.appearance.fontSize}
              label="Font Size"
              onChange={(e) =>
                handleSettingChange({
                  appearance: {
                    ...settings.appearance,
                    fontSize: e.target.value as 'small' | 'medium' | 'large',
                  },
                })
              }
              disabled={loading}
            >
              <MenuItem value="small">Small</MenuItem>
              <MenuItem value="medium">Medium</MenuItem>
              <MenuItem value="large">Large</MenuItem>
            </Select>
          </FormControl>

          <FormControlLabel
            control={
              <Switch
                checked={settings.appearance.compactMode}
                onChange={(e) =>
                  handleSettingChange({
                    appearance: {
                      ...settings.appearance,
                      compactMode: e.target.checked,
                    },
                  })
                }
                disabled={loading}
              />
            }
            label="Compact mode"
          />
        </TabPanel>

        <Divider sx={{ my: 2 }} />

        {/* Export/Import Settings */}
        <Box sx={{ display: 'flex', gap: 1, flexDirection: 'column' }}>
          <Button
            variant="outlined"
            size="small"
            onClick={() => {
              const dataStr = JSON.stringify(settings, null, 2);
              const dataBlob = new Blob([dataStr], { type: 'application/json' });
              const url = URL.createObjectURL(dataBlob);
              const link = document.createElement('a');
              link.href = url;
              link.download = 'e2e-chat-settings.json';
              link.click();
              URL.revokeObjectURL(url);
            }}
          >
            Export Settings
          </Button>
          
          <Button
            variant="outlined"
            size="small"
            component="label"
          >
            Import Settings
            <input
              type="file"
              hidden
              accept=".json"
              onChange={(e) => {
                const file = e.target.files?.[0];
                if (file) {
                  const reader = new FileReader();
                  reader.onload = (event) => {
                    try {
                      const importedSettings = JSON.parse(event.target?.result as string);
                      handleSettingChange(importedSettings);
                    } catch (error) {
                      setSaveMessage('Error: Invalid settings file');
                      setTimeout(() => setSaveMessage(null), 5000);
                    }
                  };
                  reader.readAsText(file);
                }
              }}
            />
          </Button>
        </Box>
      </Box>
    </Drawer>
  );
};

export default SettingsPanel;