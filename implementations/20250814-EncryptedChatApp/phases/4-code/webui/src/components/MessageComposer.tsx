// Message Composer Component
// Generated by ae-framework Code Generation Agent

import React, { useState, useRef, useEffect } from 'react';
import {
  Box,
  TextField,
  IconButton,
  Paper,
  Typography,
  Chip,
  Tooltip,
  CircularProgress,
} from '@mui/material';
import {
  Send as SendIcon,
  AttachFile as AttachFileIcon,
  EmojiEmotions as EmojiIcon,
  Lock as LockIcon,
} from '@mui/icons-material';
import { useSelector } from 'react-redux';
import { RootState } from '@/store';
import { useLocalStorage } from '@/hooks';

interface MessageComposerProps {
  onSendMessage: (content: string) => void;
  placeholder?: string;
  disabled?: boolean;
}

const MessageComposer: React.FC<MessageComposerProps> = ({
  onSendMessage,
  placeholder = "Type a message...",
  disabled = false,
}) => {
  const [message, setMessage] = useState('');
  const [isSending, setIsSending] = useState(false);
  const [draftKey] = useState('composer-draft');
  const [draft, setDraft] = useLocalStorage(draftKey, '');
  const textFieldRef = useRef<HTMLTextAreaElement>(null);
  
  const { activeConversationId } = useSelector((state: RootState) => state.chat);
  const { compactMode } = useSelector((state: RootState) => state.settings.appearance);

  // Load draft on mount
  useEffect(() => {
    if (draft) {
      setMessage(draft);
    }
  }, [draft]);

  // Save draft on message change
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      setDraft(message);
    }, 500);

    return () => clearTimeout(timeoutId);
  }, [message, setDraft]);

  const handleSend = async () => {
    if (!message.trim() || disabled || isSending) {
      return;
    }

    setIsSending(true);
    
    try {
      await onSendMessage(message.trim());
      setMessage('');
      setDraft('');
    } catch (error) {
      console.error('Failed to send message:', error);
    } finally {
      setIsSending(false);
    }
  };

  const handleKeyPress = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter') {
      if (event.shiftKey) {
        // Allow new line with Shift+Enter
        return;
      } else {
        event.preventDefault();
        handleSend();
      }
    }
  };

  const handleFileAttach = () => {
    // TODO: Implement file attachment
    console.log('File attachment not yet implemented');
  };

  const handleEmojiClick = () => {
    // TODO: Implement emoji picker
    console.log('Emoji picker not yet implemented');
  };

  const canSend = message.trim().length > 0 && !disabled && !isSending;

  return (
    <Paper 
      elevation={1} 
      sx={{ 
        p: compactMode ? 1 : 2,
        borderRadius: 3,
      }}
    >
      {/* Encryption Status */}
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
        <LockIcon sx={{ fontSize: 16, color: 'success.main', mr: 0.5 }} />
        <Typography variant="caption" color="success.main">
          End-to-end encrypted
        </Typography>
        
        {activeConversationId && (
          <Chip
            label={`Chat: ${activeConversationId}`}
            size="small"
            variant="outlined"
            sx={{ ml: 'auto', fontSize: '0.7rem' }}
          />
        )}
      </Box>

      {/* Message Input */}
      <Box sx={{ display: 'flex', alignItems: 'flex-end', gap: 1 }}>
        <TextField
          ref={textFieldRef}
          fullWidth
          multiline
          maxRows={4}
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder={disabled ? 'Connecting...' : placeholder}
          disabled={disabled}
          variant="outlined"
          size={compactMode ? 'small' : 'medium'}
          sx={{
            '& .MuiOutlinedInput-root': {
              borderRadius: 3,
            },
          }}
        />

        {/* Action Buttons */}
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>
          <Tooltip title="Attach file">
            <IconButton
              onClick={handleFileAttach}
              disabled={disabled}
              size={compactMode ? 'small' : 'medium'}
            >
              <AttachFileIcon />
            </IconButton>
          </Tooltip>

          <Tooltip title="Add emoji">
            <IconButton
              onClick={handleEmojiClick}
              disabled={disabled}
              size={compactMode ? 'small' : 'medium'}
            >
              <EmojiIcon />
            </IconButton>
          </Tooltip>
        </Box>

        {/* Send Button */}
        <Tooltip title={canSend ? 'Send message (Enter)' : 'Type a message'}>
          <span>
            <IconButton
              onClick={handleSend}
              disabled={!canSend}
              color="primary"
              size={compactMode ? 'medium' : 'large'}
              sx={{
                bgcolor: canSend ? 'primary.main' : 'action.disabledBackground',
                color: canSend ? 'primary.contrastText' : 'action.disabled',
                '&:hover': {
                  bgcolor: canSend ? 'primary.dark' : 'action.disabledBackground',
                },
              }}
            >
              {isSending ? (
                <CircularProgress size={20} color="inherit" />
              ) : (
                <SendIcon />
              )}
            </IconButton>
          </span>
        </Tooltip>
      </Box>

      {/* Character Counter */}
      {message.length > 0 && (
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 1 }}>
          <Typography variant="caption" color="text.secondary">
            Shift+Enter for new line
          </Typography>
          
          <Typography 
            variant="caption" 
            color={message.length > 2000 ? 'error' : 'text.secondary'}
          >
            {message.length}/2000
          </Typography>
        </Box>
      )}
    </Paper>
  );
};

export default MessageComposer;