# E2E暗号化チャットアプリケーション - Kubernetes Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: e2echat-app
  namespace: e2echat
  labels:
    app: e2echat
    component: application
    version: v1.0.0
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "E2E encrypted chat application"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: e2echat
      component: application
  template:
    metadata:
      labels:
        app: e2echat
        component: application
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: e2echat-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: e2echat-app
        image: e2echat:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: backend
          containerPort: 3000
          protocol: TCP
        - name: webui
          containerPort: 4173
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: WEBUI_PORT
          value: "4173"
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "e2echat"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: e2echat-db-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: e2echat-db-secret
              key: password
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: e2echat-redis-secret
              key: password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: e2echat-jwt-secret
              key: secret
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: e2echat-config
              key: cors-origin
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: e2echat-config
              key: log-level
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: tmp-volume
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - e2echat
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: e2echat-service
  namespace: e2echat
  labels:
    app: e2echat
    component: application
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  ports:
  - name: backend
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: webui
    port: 4173
    targetPort: 4173
    protocol: TCP
  - name: http
    port: 80
    targetPort: 4173
    protocol: TCP
  selector:
    app: e2echat
    component: application
  sessionAffinity: None

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: e2echat-config
  namespace: e2echat
  labels:
    app: e2echat
data:
  cors-origin: "https://chat.example.com,https://chat-staging.example.com"
  log-level: "info"
  max-message-size: "10485760"  # 10MB
  max-participants: "100"
  rate-limit-requests: "1000"
  rate-limit-window: "3600"  # 1 hour
  session-timeout: "86400"  # 24 hours

---
apiVersion: v1
kind: Secret
metadata:
  name: e2echat-jwt-secret
  namespace: e2echat
  labels:
    app: e2echat
type: Opaque
data:
  secret: <base64-encoded-jwt-secret>

---
apiVersion: v1
kind: Secret
metadata:
  name: e2echat-db-secret
  namespace: e2echat
  labels:
    app: e2echat
type: Opaque
data:
  username: <base64-encoded-db-username>
  password: <base64-encoded-db-password>

---
apiVersion: v1
kind: Secret
metadata:
  name: e2echat-redis-secret
  namespace: e2echat
  labels:
    app: e2echat
type: Opaque
data:
  password: <base64-encoded-redis-password>

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: e2echat-service-account
  namespace: e2echat
  labels:
    app: e2echat

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: e2echat-ingress
  namespace: e2echat
  labels:
    app: e2echat
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/websocket-services: "e2echat-service"
spec:
  tls:
  - hosts:
    - chat.example.com
    secretName: e2echat-tls
  rules:
  - host: chat.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: e2echat-service
            port:
              number: 3000
      - path: /socket.io
        pathType: Prefix
        backend:
          service:
            name: e2echat-service
            port:
              number: 3000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: e2echat-service
            port:
              number: 4173

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: e2echat-hpa
  namespace: e2echat
  labels:
    app: e2echat
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: e2echat-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: e2echat-pdb
  namespace: e2echat
  labels:
    app: e2echat
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: e2echat
      component: application